# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- azure*

pool:
  vmImage: 'ubuntu-latest'

variables:
  APP_ENV: Azure Pipelines

jobs:
  - job: Hello_Azure
    steps:
      - script: docker version
        displayName: 'Show the Docker version'
      - script: docker-compose version
        displayName: 'Show the Docker Compose version'
      - script: env
        displayName: 'Dump environment variables'

  - job: Docker_Compose_Scan
    variables:
      APP_ID: 3d974920-42c5-4337-a9b7-fad5fc660100
      APP_HOST: http://nginx_test
    steps:
      - script: docker-compose up --abort-on-container-exit
        displayName: Docker Compose Scan

#
#  include:
#    - stage: hawkscan
#      name: Docker Compose Scan
#      env:
#        - APP_ID='3d974920-42c5-4337-a9b7-fad5fc660100'
#        - APP_HOST='http://nginx_test'
#      script: docker-compose up --abort-on-container-exit
#
#    - name: Remote Scan
#      env:
#        - APP_ID='88d8c7dc-bd14-41e7-9e92-e87483871ea9'
#        - APP_HOST='http://example.com'
#      before_install:
#        - docker run -d -p 80:80 nginx
#      script: >
#        docker run --volume $(pwd):/hawk:rw --tty
#        --env API_KEY="${HAWK_API_KEY}"
#        --env APP_ID="${APP_ID}"
#        --env HOST="${APP_HOST}"
#        --env ENV="${APP_ENV}"
#        --env NO_COLOR=true
#        stackhawk/hawkscan
#
#    - name: Localhost Scan
#      env:
#        - APP_ID='f2e3301b-3cd9-4df7-87cc-74465cebde92'
#        - APP_HOST='http://127.0.0.1'
#      before_install:
#        - docker run -d -p 80:80 nginx
#      script: >
#        docker run --volume $(pwd):/hawk:rw --tty --network host
#        --env API_KEY="${HAWK_API_KEY}"
#        --env APP_ID="${APP_ID}"
#        --env HOST="${APP_HOST}"
#        --env ENV="${APP_ENV}"
#        --env NO_COLOR=true
#        stackhawk/hawkscan
